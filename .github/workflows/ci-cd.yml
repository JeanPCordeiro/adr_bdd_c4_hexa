name: CI/CD Pipeline - FizzBuzz API (Fargate/Lambda)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de d√©ploiement'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      target:
        description: 'Cible de d√©ploiement'
        required: true
        default: 'lambda'
        type: choice
        options:
        - fargate
        - lambda

env:
  NODE_VERSION: '20.x'
  AWS_REGION: 'eu-west-1'

jobs:
  test:
    name: Tests unitaires et BDD
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration de Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Installation des d√©pendances
      run: npm ci
      
    - name: Ex√©cution des tests unitaires
      run: npm test
      
    - name: V√©rification de la couverture de code
      run: npm run test:coverage
      continue-on-error: true
      
    - name: Upload des r√©sultats de couverture
      uses: codecov/codecov-action@v4
      if: success()
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Analyse statique du code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration de Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Installation des d√©pendances
      run: npm ci
      
    - name: Analyse ESLint
      run: npm run lint
      continue-on-error: true

  security:
    name: Audit de s√©curit√©
    runs-on: ubuntu-latest
    needs: [test, lint] # Ajout de la d√©pendance aux jobs test et lint
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration de Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Installation des d√©pendances
      run: npm ci
      
    - name: Audit de s√©curit√© npm
      run: npm audit --audit-level moderate

  deploy-staging-fargate:
    name: D√©ploiement staging (Fargate)
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/develop'
    environment: staging-fargate
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Installation de Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Configuration de Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: D√©ploiement sur AWS Fargate (Staging)
      run: |
        chmod +x ./deploy.sh
        ./deploy.sh staging fargate
        
    - name: Notification de d√©ploiement
      if: success()
      run: |
        echo "‚úÖ D√©ploiement staging Fargate r√©ussi pour le commit ${{ github.sha }}"

  deploy-staging-lambda:
    name: D√©ploiement staging (Lambda)
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/develop' && contains(github.event.head_commit.message, '[lambda]')
    environment: staging-lambda
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Installation de Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: D√©ploiement sur AWS Lambda (Staging)
      run: |
        chmod +x ./deploy.sh
        ./deploy.sh staging lambda
        
    - name: Notification de d√©ploiement
      if: success()
      run: |
        echo "‚úÖ D√©ploiement staging Lambda r√©ussi pour le commit ${{ github.sha }}"

  deploy-production-fargate:
    name: D√©ploiement production (Fargate)
    runs-on: ubuntu-latest
    needs: [security]
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[lambda]')
    environment: production-fargate
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Installation de Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Configuration de Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: D√©ploiement sur AWS Fargate (Production)
      run: |
        chmod +x ./deploy.sh
        ./deploy.sh production fargate
        
    - name: Notification de d√©ploiement r√©ussi
      if: success()
      run: |
        echo "üéâ D√©ploiement production Fargate r√©ussi pour le commit ${{ github.sha }}"

  deploy-production-lambda:
    name: D√©ploiement production (Lambda)
    runs-on: ubuntu-latest
    needs: [security]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[lambda]')
    environment: production-lambda
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Installation de Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: D√©ploiement sur AWS Lambda (Production)
      run: |
        chmod +x ./deploy.sh
        ./deploy.sh production lambda
        
    - name: Notification de d√©ploiement r√©ussi
      if: success()
      run: |
        echo "üéâ D√©ploiement production Lambda r√©ussi pour le commit ${{ github.sha }}"

  # Job pour d√©ploiement manuel avec choix de cible
  deploy-manual:
    name: D√©ploiement manuel
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }} # Correction: Utilisation d'un environnement statique
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration des credentials AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Installation de Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Configuration de Docker Buildx (si Fargate)
      if: github.event.inputs.target == 'fargate'
      uses: docker/setup-buildx-action@v3
      
    - name: D√©ploiement
      run: |
        chmod +x ./deploy.sh
        ./deploy.sh ${{ github.event.inputs.environment }} ${{ github.event.inputs.target }}
        
    - name: Notification de d√©ploiement
      if: success()
      run: |
        echo "‚úÖ D√©ploiement manuel r√©ussi:"
        echo "   - Environnement: ${{ github.event.inputs.environment }}"
        echo "   - Cible: ${{ github.event.inputs.target }}"
        echo "   - Commit: ${{ github.sha }}"


