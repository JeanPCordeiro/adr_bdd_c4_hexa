#!/bin/bash

# Script de d√©ploiement pour AWS Fargate ou Lambda
# Usage: ./deploy.sh [staging|production] [fargate|lambda]

set -e

# Fonction pour afficher l'aide
show_help() {
    echo "Usage: $0 [ENVIRONMENT] [TARGET]"
    echo ""
    echo "ENVIRONMENT:"
    echo "  staging     D√©ploiement en environnement de staging (d√©faut)"
    echo "  production  D√©ploiement en environnement de production"
    echo ""
    echo "TARGET:"
    echo "  fargate     D√©ploiement sur AWS Fargate (d√©faut)"
    echo "  lambda      D√©ploiement sur AWS Lambda"
    echo ""
    echo "Exemples:"
    echo "  $0                          # staging + fargate"
    echo "  $0 staging fargate          # staging + fargate"
    echo "  $0 staging lambda           # staging + lambda"
    echo "  $0 production fargate       # production + fargate"
    echo "  $0 production lambda        # production + lambda"
    echo ""
    echo "Variables d'environnement:"
    echo "  AWS_REGION                  # R√©gion AWS (d√©faut: us-east-1)"
}

# Gestion des arguments d'aide
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

ENVIRONMENT=${1:-staging}
TARGET=${2:-fargate}
AWS_REGION=${AWS_REGION:-us-east-1}
APP_NAME="fizzbuzz"

echo "üöÄ D√©ploiement de l'API FizzBuzz"
echo "Environnement: $ENVIRONMENT"
echo "Cible: $TARGET"
echo "R√©gion AWS: $AWS_REGION"

# Validation des param√®tres
if [[ ! "$ENVIRONMENT" =~ ^(staging|production)$ ]]; then
    echo "‚ùå Environnement invalide. Utilisez 'staging' ou 'production'."
    exit 1
fi

if [[ ! "$TARGET" =~ ^(fargate|lambda)$ ]]; then
    echo "‚ùå Cible invalide. Utilisez 'fargate' ou 'lambda'."
    exit 1
fi

# V√©rification des pr√©requis
command -v aws >/dev/null 2>&1 || { echo "‚ùå AWS CLI est requis mais non install√©."; exit 1; }
command -v terraform >/dev/null 2>&1 || { echo "‚ùå Terraform est requis mais non install√©."; exit 1; }

if [[ "$TARGET" == "fargate" ]]; then
    command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker est requis pour le d√©ploiement Fargate."; exit 1; }
fi

# V√©rification de la connexion AWS
echo "üîê V√©rification des credentials AWS..."
aws sts get-caller-identity > /dev/null || { echo "‚ùå Credentials AWS non configur√©s."; exit 1; }

# Fonction pour d√©ployer sur Fargate
deploy_fargate() {
    echo "üê≥ D√©ploiement sur AWS Fargate..."
    
    # Construction de l'image Docker
    echo "üî® Construction de l'image Docker..."
    docker build -t $APP_NAME:latest .
    
    # R√©pertoire Terraform pour Fargate
    TERRAFORM_DIR="terraform/environments/$ENVIRONMENT"
    
    if [[ ! -d "$TERRAFORM_DIR" ]]; then
        echo "‚ùå R√©pertoire Terraform non trouv√©: $TERRAFORM_DIR"
        exit 1
    fi
    
    cd "$TERRAFORM_DIR"
    
    # Initialisation de Terraform
    echo "üèóÔ∏è Initialisation de Terraform..."
    terraform init
    
    # Application de l'infrastructure
    echo "üìã Planification de l'infrastructure..."
    terraform plan -out=tfplan
    
    echo "üöÄ Application de l'infrastructure..."
    terraform apply tfplan
    
    # R√©cup√©ration de l'URL ECR
    ECR_URL=$(terraform output -raw ecr_repository_url)
    IMAGE_TAG=$(git rev-parse --short HEAD 2>/dev/null || echo "latest")
    
    echo "üì§ Push de l'image vers ECR..."
    
    # Connexion √† ECR
    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL
    
    # Tag et push de l'image
    docker tag $APP_NAME:latest $ECR_URL:$IMAGE_TAG
    docker tag $APP_NAME:latest $ECR_URL:latest
    
    docker push $ECR_URL:$IMAGE_TAG
    docker push $ECR_URL:latest
    
    # Mise √† jour du service ECS
    echo "üîÑ Mise √† jour du service ECS..."
    CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
    SERVICE_NAME=$(terraform output -raw ecs_service_name)
    
    aws ecs update-service \
        --cluster $CLUSTER_NAME \
        --service $SERVICE_NAME \
        --force-new-deployment \
        --region $AWS_REGION
    
    echo "‚è≥ Attente de la stabilit√© du d√©ploiement..."
    aws ecs wait services-stable \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $AWS_REGION
    
    # R√©cup√©ration de l'URL de l'application
    APP_URL=$(terraform output -raw application_url)
    
    echo "‚úÖ D√©ploiement Fargate termin√© avec succ√®s!"
    echo "üåê URL de l'application: $APP_URL"
    echo "üè• Health check: $APP_URL/api/health"
    echo "üìä Monitoring: https://console.aws.amazon.com/ecs/home?region=$AWS_REGION#/clusters/$CLUSTER_NAME/services"
    
    cd - > /dev/null
}

# Fonction pour d√©ployer sur Lambda
deploy_lambda() {
    echo "‚ö° D√©ploiement sur AWS Lambda..."
    
    # R√©pertoire Terraform pour Lambda
    TERRAFORM_DIR="terraform/environments/$ENVIRONMENT-lambda"
    
    if [[ ! -d "$TERRAFORM_DIR" ]]; then
        echo "‚ùå R√©pertoire Terraform non trouv√©: $TERRAFORM_DIR"
        exit 1
    fi
    
    cd "$TERRAFORM_DIR"
    
    # Initialisation de Terraform
    echo "üèóÔ∏è Initialisation de Terraform..."
    terraform init
    
    # Application de l'infrastructure
    echo "üìã Planification de l'infrastructure..."
    terraform plan -out=tfplan
    
    echo "üöÄ Application de l'infrastructure..."
    terraform apply tfplan
    
    # R√©cup√©ration des informations de d√©ploiement
    FUNCTION_NAME=$(terraform output -raw lambda_function_name)
    APP_URL=$(terraform output -raw application_url)
    LOG_GROUP=$(terraform output -raw cloudwatch_log_group)
    
    echo "‚úÖ D√©ploiement Lambda termin√© avec succ√®s!"
    echo "‚ö° Fonction Lambda: $FUNCTION_NAME"
    echo "üåê URL de l'application: $APP_URL"
    echo "üè• Health check: $APP_URL/api/health"
    echo "üìä Logs: https://console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/${LOG_GROUP//\//%2F}"
    
    cd - > /dev/null
}

# Fonction pour les tests de fum√©e
run_smoke_tests() {
    local app_url=$1
    
    echo "üß™ Ex√©cution des tests de fum√©e..."
    sleep 10  # Attendre que l'application soit pr√™te
    
    # Test de sant√©
    #if curl -f "$app_url/api/health" > /dev/null 2>&1; then
    #    echo "‚úÖ Health check r√©ussi"
    #else
    #    echo "‚ùå Health check √©chou√©"
    #    return 1
    #fi
    
    # Test FizzBuzz
    if curl -f "$app_url/api/fizzbuzz/15" | grep -q "FizzBuzz"; then
        echo "‚úÖ Test FizzBuzz r√©ussi"
    else
        echo "‚ùå Test FizzBuzz √©chou√©"
        return 1
    fi
    
    # Test POST
    if curl -f -X POST -H "Content-Type: application/json" -d '{"number": 9}' "$app_url/api/fizzbuzz" | grep -q "Fizz"; then
        echo "‚úÖ Test POST FizzBuzz r√©ussi"
    else
        echo "‚ùå Test POST FizzBuzz √©chou√©"
        return 1
    fi
    
    echo "üéâ Tous les tests de fum√©e ont r√©ussi!"
}

# Fonction pour afficher l'aide
show_help() {
    echo "Usage: $0 [ENVIRONMENT] [TARGET]"
    echo ""
    echo "ENVIRONMENT:"
    echo "  staging     D√©ploiement en environnement de staging (d√©faut)"
    echo "  production  D√©ploiement en environnement de production"
    echo ""
    echo "TARGET:"
    echo "  fargate     D√©ploiement sur AWS Fargate (d√©faut)"
    echo "  lambda      D√©ploiement sur AWS Lambda"
    echo ""
    echo "Exemples:"
    echo "  $0                          # staging + fargate"
    echo "  $0 staging fargate          # staging + fargate"
    echo "  $0 staging lambda           # staging + lambda"
    echo "  $0 production fargate       # production + fargate"
    echo "  $0 production lambda        # production + lambda"
    echo ""
    echo "Variables d'environnement:"
    echo "  AWS_REGION                  # R√©gion AWS (d√©faut: us-east-1)"
}

# Gestion des arguments d'aide
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Ex√©cution du d√©ploiement selon la cible
case $TARGET in
    fargate)
        deploy_fargate
        APP_URL=$(cd "terraform/environments/$ENVIRONMENT" && terraform output -raw application_url)
        ;;
    lambda)
        deploy_lambda
        APP_URL=$(cd "terraform/environments/$ENVIRONMENT-lambda" && terraform output -raw application_url)
        ;;
    *)
        echo "‚ùå Cible non support√©e: $TARGET"
        exit 1
        ;;
esac

# Tests de fum√©e
if run_smoke_tests "$APP_URL"; then
    echo "üéâ D√©ploiement et tests termin√©s avec succ√®s!"
    echo "üìù R√©sum√©:"
    echo "   - Environnement: $ENVIRONMENT"
    echo "   - Cible: $TARGET"
    echo "   - URL: $APP_URL"
    echo "   - R√©gion: $AWS_REGION"
else
    echo "‚ùå Les tests de fum√©e ont √©chou√©"
    exit 1
fi

